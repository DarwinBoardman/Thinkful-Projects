THINKFUL MODULE 10 - DRILLS
DARWIN BOARDMAN

Using connection credentials provided below, create a Jupyter notebook that uses SQL Alchemy
to access a SQL database containing data about Baseball Hall of Fame. Use Python to answer 
some basic questions about the data.

To complete this challenge, you should submit a single text file that contains the SQL query 
required for each question. In some cases, you must also provide a specific answer. There are 
also some questions that require you to draw a schema of the relationships between the tables. 
Plan to spend some time reviewing your answers with your mentor during your next session.

Credentials <br>

postgres_user = 'dsbc_student' <br>
postgres_pw = '7*.8G9QH21' <br>
postgres_host = '142.93.121.174' <br>
postgres_port = '5432' <br>
postgres_db = 'baseball'

1. Draw a schema of the relationship between the people, salaries, and hof_inducted tables. 
  A. Label the primary and foreign keys. (Note that a field can be a primary key to one table and a foreign key to another.)
     GITHUB LINK:https://github.com/DarwinBoardman/Thinkful-Projects/blob/master/Thinkful_schema_database_SQL.png
  B. What are the parent and child tables? Are these one-to-one, one-to-many, or many-to-many relationships?
     The people table is a parent to hof_inducted, with a 1-1 relationship.
     The people table is a parent to salaries, with a 1-many relationship.


2. Write a query that returns the namefirst and namelast fields of the people table, 
   along with the inducted field from the hof_inducted table. 
   All rows from the people table should be returned, and NULL values for the fields 
   from hof_inducted should be returned when there is no match found.
2.Query: SELECT namefirst, namelast, inducted
FROM people
LEFT OUTER JOIN hof_inducted
ON people.playerid = hof_inducted.playerid;

3. In 2006, a special Baseball Hall of Fame induction was conducted for players from the negro baseball
   leagues of the 20th century. In that induction, 17 players were posthumously inducted into the Baseball 
   Hall of Fame. Write a query that returns the first and last names, birth and death dates, and birth 
   countries for these players. Note that the year of induction was 2006, and the value for votedby will
   be “Negro League.”
3.Query: SELECT namefirst, namelast, birthyear, deathyear, birthcountry
FROM people
LEFT OUTER JOIN hof_inducted
ON people.playerid = hof_inducted.playerid
WHERE hof_inducted.yearid = 2006 
AND hof_inducted.votedby = 'Negro League';

4. Write a query that returns the yearid, playerid, teamid, and salary fields from the salaries table, 
   along with the category field from the hof_inducted table. Keep only the records that are in both salaries 
   and hof_inducted. Hint: While a field named yearid is found in both tables, don’t JOIN by it. You must, however,
   explicitly name which field to include.
4.Query: SELECT salaries.yearid, salaries.playerid, teamid, salary, category
FROM salaries
INNER JOIN hof_inducted
ON salaries.playerid = hof_inducted.playerid;

5. Write a query that returns the playerid, yearid, teamid, lgid, and salary fields from the salaries table and the 
   inducted field from the hof_inducted table. Keep all records from both tables.
5.Query: SELECT salaries.playerid, salaries.yearid, teamid, lgid, salary, hof_inducted.inducted
FROM salaries
FULL OUTER JOIN hof_inducted
ON salaries.playerid = hof_inducted.playerid;

6. There are 2 tables, hof_inducted and hof_not_inducted, indicating successful and unsuccessful inductions into the
   Baseball Hall of Fame, respectively.
   A. Combine these 2 tables by all fields. Keep all records.
   A.Query: SELECT *
FROM hof_inducted
UNION ALL 
SELECT *
FROM hof_not_inducted;
   B. Get a distinct list of all player IDs for players who have been put up for HOF induction.
   B.Query: SELECT playerid
FROM hof_inducted
UNION
SELECT playerid
FROM hof_not_inducted;

7. Write a query that returns the last name, first name (see people table), and total recorded salaries for all 
   players found in the salaries table.
7.Query: SELECT namelast, namefirst, SUM(salary) AS total_salary
FROM people
INNER JOIN salaries 
ON people.playerid = salaries.playerid
GROUP BY namelast, namefirst;

8. Write a query that returns all records from the hof_inducted and hof_not_inducted tables that include playerid, 
   yearid, namefirst, and namelast. Hint: Each FROM statement will include a LEFT OUTER JOIN!
8.Query: SELECT hof_inducted.playerid, yearid, namefirst, namelast
FROM hof_inducted
LEFT OUTER JOIN people
ON hof_inducted.playerid = people.playerid

UNION ALL

SELECT hof_not_inducted.playerid, yearid, namefirst, namelast
FROM hof_not_inducted
LEFT OUTER JOIN people
ON hof_not_inducted.playerid = people.playerid;

9. Return a table including all records from both hof_inducted and hof_not_inducted, 
   and include a new field, namefull, which is formatted as namelast , namefirst 
   (in other words, the last name, followed by a comma, then a space, then the first name). 
   The query should also return the yearid and inducted fields. Include only records since 
   1980 from both tables. Sort the resulting table by yearid, then inducted so that Y comes 
   before N. Finally, sort by the namefull field, A to Z.
9.Query: SELECT concat(namelast,',',' ',namefirst) AS namefull, hof_inducted.yearid, inducted 
FROM hof_inducted
LEFT OUTER JOIN people
ON hof_inducted.playerid = people.playerid
WHERE yearid >= 1980

UNION ALL

SELECT concat(namelast,',',' ',namefirst) AS namefull, hof_not_inducted.yearid, inducted
FROM hof_not_inducted
LEFT OUTER JOIN people
ON hof_not_inducted.playerid = people.playerid
WHERE yearid >= 1980
ORDER BY yearid, inducted DESC, namefull;

10. Write a query that returns the highest annual salary for each teamid, 
    ranked from high to low, along with the corresponding playerid. Bonus! 
    Return namelast and namefirst in the resulting table. (You can find these 
    in the people table.)
10.Query: WITH max AS
(SELECT MAX(salary) as max_salary, teamid, yearid
FROM salaries
GROUP BY teamid, yearid)
SELECT salaries.yearid, salaries.teamid, salaries.playerid, namelast, namefirst, max.max_salary
FROM salaries 
LEFT OUTER JOIN people
ON salaries.playerid = people.playerid
RIGHT OUTER JOIN max
ON salaries.teamid = max.teamid AND salaries.yearid = max.yearid AND salaries.salary = max.max_salary
ORDER BY max.max_salary DESC;

11. Select birthyear, deathyear, namefirst, and namelast of all the players born since 
    the birth year of Babe Ruth (playerid = ruthba01). Sort the results by birth year from 
    low to high.
11.Query: SELECT birthyear, deathyear, namefirst, namelast
FROM people
WHERE birthyear > ANY
  (SELECT birthyear
   FROM people
   WHERE playerid = 'ruthba01')
ORDER BY birthyear;

12. Using the people table, write a query that returns namefirst, namelast, and a field 
    called usaborn. The usaborn field should show the following: if the player's birthcountry 
    is the USA, then the record is 'USA.' Otherwise, it's 'non-USA.' Order the results
    by 'non-USA' records first.
12.Query: SELECT namefirst, namelast, 

CASE 
      WHEN birthcountry = 'USA' THEN 'USA'
	  ELSE 'non-USA'
END as usaborn
FROM people
ORDER BY 3 DESC;

13. Calculate the average height for players throwing with their right hand versus their 
    left hand. Name these fields right_height and left_height, respectively.
13.Query: SELECT
ROUND(AVG(CASE WHEN throws = 'R' THEN height END),2) as right_height,
ROUND(AVG(CASE WHEN throws = 'L' THEN height END),2) as left_height

FROM people;
13.Answer: 72.32" for right-handed pitchers and 72.55" for left-handed pitchers.

14. Get the average of each team's maximum player salary since 2010. Hint: WHERE will go 
    inside your CTE.
14.Query: WITH max_avg_sal AS
(SELECT MAX(salary) as max_sal, teamid, yearid
 FROM salaries
 WHERE yearid >=2010
 GROUP BY teamid, yearid)
 
 SELECT teamid, yearid, AVG(max_sal) as avg_max_sal
 FROM max_avg_sal
 GROUP BY teamid, yearid
 ORDER BY yearid;









